# Step 1: Generate requirements.txt (run this in your Django project directory)
pip freeze > requirements.txt

# Step 2: Install Docker on Ubuntu/Debian
sudo apt update
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Add your user to docker group to run docker without sudo
sudo usermod -aG docker $USER
newgrp docker

# Step 3: Build Docker image (run in project root where Dockerfile is located)
docker build -t messaging-app .

# Step 4: Run single container (optional - use this to test before docker-compose)
docker run -d -p 8000:8000 --name messaging-app-container messaging-app

# Step 5: Use Docker Compose (recommended)
# First, make sure you have the .env file with your environment variables
# Then run:
docker-compose up --build

# To run in detached mode:
docker-compose up -d --build

# Step 6: Check if services are running
docker-compose ps

# Step 7: View logs
docker-compose logs web
docker-compose logs db

# Step 8: Access the application
# Visit http://localhost:8000 in your browser

# Step 9: Stop services
docker-compose down

# Step 10: Stop and remove volumes (careful - this deletes database data)
docker-compose down -v

# Useful commands:
# Enter the web container shell
docker-compose exec web bash

# Enter the database container
docker-compose exec db mysql -u root -p

# Run Django management commands
docker-compose exec web python manage.py makemigrations
docker-compose exec web python manage.py migrate
docker-compose exec web python manage.py createsuperuser
docker-compose exec web python manage.py collectstatic
