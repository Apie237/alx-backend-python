
#!/bin/bash

# kurbeScript - Kubernetes Setup and Management Script
# This script installs minikube, starts a Kubernetes cluster, and verifies it

set -e  # Exit on any error

echo "ðŸš€ Starting Kubernetes Setup Script..."
echo "======================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install kubectl
install_kubectl() {
    print_status "Installing kubectl..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux installation
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac installation
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        # Windows (Git Bash/MSYS)
        print_warning "For Windows, please install kubectl manually from: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/"
        print_warning "Or use: winget install -e --id Kubernetes.kubectl"
        return 1
    fi
    
    print_success "kubectl installed successfully!"
}

# Function to install minikube
install_minikube() {
    print_status "Installing minikube..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux installation
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        rm minikube-linux-amd64
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac installation
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
        sudo install minikube-darwin-amd64 /usr/local/bin/minikube
        rm minikube-darwin-amd64
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        # Windows (Git Bash/MSYS)
        print_warning "For Windows, please install minikube manually from: https://minikube.sigs.k8s.io/docs/start/"
        print_warning "Or use: winget install minikube"
        return 1
    fi
    
    print_success "minikube installed successfully!"
}

# Check and install prerequisites
print_status "Checking prerequisites..."

# Check if kubectl is installed
if ! command_exists kubectl; then
    print_warning "kubectl not found. Installing..."
    install_kubectl
else
    print_success "kubectl is already installed"
fi

# Check if minikube is installed
if ! command_exists minikube; then
    print_warning "minikube not found. Installing..."
    install_minikube
else
    print_success "minikube is already installed"
fi

# Verify installations
print_status "Verifying installations..."
kubectl version --client --short 2>/dev/null || kubectl version --client 2>/dev/null
minikube version

echo ""
echo "======================================"
print_status "Starting Kubernetes cluster..."
echo "======================================"

# Start minikube cluster
print_status "Starting minikube cluster (this may take a few minutes)..."
minikube start --driver=docker 2>/dev/null || minikube start

print_success "Minikube cluster started!"

echo ""
echo "======================================"
print_status "Verifying cluster is running..."
echo "======================================"

# Verify cluster is running
print_status "Getting cluster information..."
kubectl cluster-info

echo ""
print_status "Getting cluster status..."
kubectl get nodes

echo ""
print_status "Checking minikube status..."
minikube status

echo ""
echo "======================================"
print_status "Retrieving available pods..."
echo "======================================"

# Get all pods in all namespaces
print_status "Getting pods in all namespaces..."
kubectl get pods --all-namespaces

echo ""
print_status "Getting pods in default namespace..."
kubectl get pods

echo ""
echo "======================================"
print_success "Kubernetes cluster setup completed!"
echo "======================================"

echo ""
print_status "Cluster Summary:"
echo "â€¢ Cluster Status: $(kubectl get nodes --no-headers | wc -l) node(s) ready"
echo "â€¢ Minikube IP: $(minikube ip)"
echo "â€¢ Dashboard: Run 'minikube dashboard' to access the web UI"
echo "â€¢ Stop cluster: Run 'minikube stop'"
echo "â€¢ Delete cluster: Run 'minikube delete'"

echo ""
print_status "Useful commands:"
echo "â€¢ kubectl get pods                    - List pods in default namespace"
echo "â€¢ kubectl get pods --all-namespaces  - List all pods"
echo "â€¢ kubectl get services                - List services"
echo "â€¢ kubectl get nodes                   - List cluster nodes"
echo "â€¢ minikube dashboard                  - Open Kubernetes dashboard"

echo ""
print_success "ðŸŽ‰ Kubernetes setup script completed successfully!"

# Optional: Wait for user input before exiting
echo ""
read -p "Press Enter to continue..." -r

